<?php
/**
 * @file
 */

// Make sure this is loaded.
require_once "includes/autoloader.php";

/**
 * Implements hook_help().
 */
function stanford_jira_exposed_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    /*
     *case 'admin/help#block':
     *  return '<p>' . t('Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions "Sidebar first", "Sidebar second", "Featured", "Content", "Header", "Footer", etc., and a block may appear in any one of these areas. The <a href="@blocks">blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.', array('@blocks' => url('admin/structure/block'))) . '</p>';
     */
    case 'admin/help#stanford_jira_exposed':
      return '<p>' . t('Contact your site administrator.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function stanford_jira_exposed_menu() {
  /*
   *$items['blog'] = array(
   *  'title' => 'blogs',
   *  'page callback' => 'blog_page',
   *  'access arguments' => array('access content'),
   *  'type' => MENU_SUGGESTED_ITEM,
   *);
   */

  return $items;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function stanford_jira_exposed_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "bean_admin_ui" && $api == "bean") {
    return array("version" => "5");
  }
  if ($module == "bean" && $api == "types") {
    return array("version" => "5");
  }
}

/**
 * [stanford_jira_exposed_bean_types_api_info description]
 * @return [type] [description]
 */
function stanford_jira_exposed_bean_types_api_info() {
  return array("api" => 5);
}

/**
 * Implementation of hook_bean_types().
 */
function stanford_jira_exposed_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'stanford_jira_exposed') . '/plugins/bean';
  $plugins['stanford_jira'] = array(
    'label' => t("Stanford Jira"),
    'description' => t("Allows the content author to select from a number of configuration options in order to display ticket information from Jira."),
    'type' => 'stanford_jira',
    'handler' => array(
      'class' => 'StanfordJiraExposedBean',
      'parent' => "bean",
      'path' => $plugin_path,
      'file' => 'stanford_jira_exposed.bean.type.inc',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_theme().
 */
function stanford_jira_exposed_theme($existing, $type, $theme, $path) {
  return array(
    'agileheader' => array(
      'file' => 'stanford_jira_exposed.theme.inc',
      'variables' => array('items' => NULL, 'keys' => NULL),
    ),
    'agilebody' => array(
      'file' => 'stanford_jira_exposed.theme.inc',
      'variables' => array('groups' => NULL),
    ),
    'agileitem' => array(
      'file' => 'stanford_jira_exposed.theme.inc',
      'variables' => array('item' => NULL),
    ),
    'agileitemlist' => array(
      'file' => 'stanford_jira_exposed.theme.inc',
      'variables' => array('items' => NULL, 'type' => NULL),
    ),
    'agilecomponents' => array(
      'file' => 'stanford_jira_exposed.theme.inc',
      'variables' => array('items' => NULL),
    ),
  );
}

/**
 * [stanford_jira_exposed_sort_by_weight_key description]
 * @param  [type] $a [description]
 * @param  [type] $b [description]
 * @return [type]    [description]
 */
function stanford_jira_exposed_sort_by_category_key(&$array, $order) {

  $original = $array;
  $array = array();

  foreach ($order as $key) {
    foreach ($original as $index => $item) {
      if (isset($item['catid']) && $item['catid'] == $key) {
        unset($item['catid']);
        $array[$index] = $item;
      }
    }
  }

}
