<?php
/**
 * @file
 */

/**
 * Implements hook_help().
 */
function stanford_jira_exposed_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    /*
     *case 'admin/help#block':
     *  return '<p>' . t('Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions "Sidebar first", "Sidebar second", "Featured", "Content", "Header", "Footer", etc., and a block may appear in any one of these areas. The <a href="@blocks">blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.', array('@blocks' => url('admin/structure/block'))) . '</p>';
     */
    case 'admin/help#stanford_jira_exposed':
      return '<p>' . t('Contact your site administrator.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function stanford_jira_exposed_menu() {
  /*
   *$items['blog'] = array(
   *  'title' => 'blogs',
   *  'page callback' => 'blog_page',
   *  'access arguments' => array('access content'),
   *  'type' => MENU_SUGGESTED_ITEM,
   *);
   */

  return $items;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function stanford_jira_exposed_ctools_plugin_api($module = NULL, $api = NULL) {
  if ($module == "bean_admin_ui" && $api == "bean") {
    return array("version" => "5");
  }
  if ($module == "bean" && $api == "types") {
    return array("version" => "5");
  }
}

/**
 * [stanford_jira_exposed_bean_types_api_info description]
 * @return [type] [description]
 */
function stanford_jira_exposed_bean_types_api_info() {
  return array("api" => 5);
}

/**
 * Implementation of hook_bean_types().
 */
function stanford_jira_exposed_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'stanford_jira_exposed') . '/plugins/bean';
  $plugins['stanford_jira'] = array(
    'label' => t("Stanford Jira"),
    'description' => t("Allows the content author to select from a number of configuration options in order to display ticket information from Jira."),
    'type' => 'stanford_jira',
    'handler' => array(
      'class' => 'StanfordJiraExposedBean',
      'parent' => "bean",
      'path' => $plugin_path,
      'file' => 'stanford_jira_exposed.bean.type.inc',
    ),
  );
  return $plugins;
}

/**
 * [stanford_jira_exposed_get_something description]
 * @return [type] [description]
 */
function stanford_jira_exposed_get_something() {
  $username = variable_get("jira_rest_username");
  $password = variable_get("jira_rest_password");
  $jql = 'project = BASIC AND fixVersion = "JS 4.5"';

  $jira = jira_rest_searchissue($username, $password, $jql);

  dpm($jira);
  $vars = array(
    'header' => array(
      'type', 'key', 'title', 'suggested',
    ),
    'rows' => array(),
  );

  foreach ($jira->issues as $k => $issue) {
    $vars['rows'][] = array($issue->fields->issuetype->name, $issue->key, $issue->fields->summary, $issue->fields->created);
  }

  $content['datatable'] = array();
  $content['datatable']['#theme'] = "table";
  $content['datatable']['#header'] = $vars['header'];
  $content['datatable']['#rows'] = $vars['rows'];
}

/**
 * Builds out Jira Query Language Query.
 * @param  [type] $project [description]
 * @param  [type] $type    [description]
 * @param  [type] $key     [description]
 * @return [type]          [description]
 */
function stanford_jira_exposed_build_jql($project = "ANY", $type = null, $key = null) {

  $query = array();
  $query[] = "project = " . $project;

  if (!is_null($type)) {
    switch ($type) {
      case 'version':
        $query[] = "fixVersion = \"" . $key . "\"";
        break;
    }
  }

  return implode(" AND ", $query);
}

/**
 * [stanford_jira_exposed_get_issues description]
 * @param  [type] $jql [description]
 * @return [type]      [description]
 */
function stanford_jira_exposed_get_issues($jql = "") {
  $username = variable_get("jira_rest_username");
  $password = variable_get("jira_rest_password");
  $jira = jira_rest_searchissue($username, $password, $jql);
  if (isset($jira->issues)) {
    return $jira->issues;
  }
  throw new Exception("Could not get issues");
}
